<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Self-Development on</title><link>https://taetaetae.github.io/tags/self-development/</link><description>Recent content in Self-Development on</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sun, 28 Jun 2020 20:51:03 +0000</lastBuildDate><atom:link href="https://taetaetae.github.io/tags/self-development/index.xml" rel="self" type="application/rss+xml"/><item><title>그런 개발자로 괜찮은가 - '자기계발' 편</title><link>https://taetaetae.github.io/2020/06/28/a-good-developer-in-terms-of-self-development/</link><pubDate>Sun, 28 Jun 2020 20:51:03 +0000</pubDate><guid>https://taetaetae.github.io/2020/06/28/a-good-developer-in-terms-of-self-development/</guid><description>&lt;p>　학창 시절엔 &amp;lsquo;선생님&amp;rsquo;께서 정해놓으신 커리큘럼에 따라가기만 하면 큰 문제 없이 지식을 학습할 수 있었다. 거기에 주기적으로 치르는 시험을 통해 &amp;lsquo;점수&amp;rsquo;라는 평가 기준으로 얼마나 잘 성장했나를 검사하기도 한다. &lt;!--more -->졸업 후 어렵게 어렵게 취업에 성공을 하여 &amp;lsquo;신입 개발자&amp;rsquo;라는 배지를 달고 회사에 첫 출근. 그렇게 n 년이 지난 지금과 라떼 시절(?)을 비교해 보며 과연 &amp;lsquo;학습&amp;rsquo;에 대한 열정 그래프가 아직도 우상향 중인가? 하는 질문엔 일단 단전부터 올라오는 깊은 한숨과 함게 이상하게도 앞이 캄캄해진다.&lt;/p>
&lt;figure>&lt;a class="lightgallery" href="https://taetaetae.github.io/images/a-good-developer-in-terms-of-self-development/latte.jpg" title="/images/a-good-developer-in-terms-of-self-development/latte.jpg" data-thumbnail="/images/a-good-developer-in-terms-of-self-development/latte.jpg" data-sub-html="&lt;h2>우리는 모두 라떼 시절을 가지고 있다. 출처 : https://www.dogdrip.net/212294087&lt;/h2>">
 &lt;img
 class="lazyload"
 src="https://taetaetae.github.io/svg/loading.min.svg"
 data-src="https://taetaetae.github.io/images/a-good-developer-in-terms-of-self-development/latte.jpg"
 data-srcset="https://taetaetae.github.io/images/a-good-developer-in-terms-of-self-development/latte.jpg, https://taetaetae.github.io/images/a-good-developer-in-terms-of-self-development/latte.jpg 1.5x, https://taetaetae.github.io/images/a-good-developer-in-terms-of-self-development/latte.jpg 2x"
 data-sizes="auto"
 alt="/images/a-good-developer-in-terms-of-self-development/latte.jpg" width="50%" />
 &lt;/a>&lt;figcaption class="image-caption">우리는 모두 라떼 시절을 가지고 있다. &lt;br>출처 : &lt;a href="https://www.dogdrip.net/212294087" target="_blank" rel="noopener noreffer ">https://www.dogdrip.net/212294087&lt;/a>&lt;/figcaption>
 &lt;/figure>
&lt;p>　배워야 할게 너무 많다. 아니 그보다 배운 것을 이제 활용해야지 싶으면 또 새로운 기술이 등장한다. 그렇게 매너리즘에 빠지고. 거기다 회사일이 바쁘다는 핑계로 자기계발을 멈추다 보면 남들보다 뒤처진다는 생각에 괜히 자괴감이 들어 우울해 지곤 한다. (코로나 블루 때문만은 아니겠지&amp;hellip;) 그 가운데 회사에는 정말 좋은 선배님들도 많고 멘토-멘티 관계를 잘 활용하면 충분히, 잘, 올바른 길로 성장할 수 있을 것이라 생각한다. 하지만 그렇게 누군가에게 &amp;lsquo;의존&amp;rsquo;만 하다 그 대상이 없어진다든지 심지어 그런 대상조차 없을 경우에는 어떻게 해야 할까? 점점 기술은 발전하고 배워야 할 것들은 홍수처럼 넘쳐흐르고 있는 가운데 &amp;lsquo;회사원&amp;rsquo;에서 나아가 &amp;lsquo;개발자&amp;rsquo;로써 성장을 하기 위해서는 어떠한 방법이 있을까?&lt;/p>
&lt;p>　이번 포스팅에서는 개발자로 살아가면서 성장하기 위한즉, 자기계발의 &amp;lsquo;방법&amp;rsquo;에 대해 이야기해보려 한다. 이것이 정답이다 하는 은 탄환을 소개하려는 것은 아니다. 특히 개발자로서의 생을 마감(?) 할 때까지는 계속 배워야 하는 숙명과도 같은 직업이기에 첫 단추를 잘 끼워서 갑작스러운 기술의 변화에 일희일비 하지 않고 스펀지처럼 무엇이든 흡수하는. 말랑말랑한 정신을 갖기 위함이라고나 할까.&lt;/p>
&lt;h2 id="블로그">블로그&lt;/h2>
&lt;p>　개발자가 글도 써야 하나?라는 질문에는 필자가 예전에 정리해둔 &lt;a href="https://taetaetae.github.io/2019/10/27/a-reason-for-writing/" target="_blank" rel="noopener noreffer ">개발하기 바쁜데 글까지 쓰라고? (글쓰는 개발자가 되자.)&lt;/a>라는 글을 참고해봐도 좋을 것 같다. 해당 포스팅에서 수차례 강조하였지만 그만큼 개발자에게는 특히나 글쓰기가 중요하고 필요하다. 글을 꼭 &amp;lsquo;잘&amp;rsquo;써야 한다는 부담을 가질 필요는 없다. (필자도 그렇게 잘 쓰는 편은 아니다&amp;hellip;) 다만 무언가를 기록하고 정리하고 자신만의 기준에 맞추어 재 정리하는 습관을 기르다 보면 이러한 생각들이 개발을 할 때에도 도움이 상당히 되었기 때문이다.&lt;/p>
&lt;figure>&lt;a class="lightgallery" href="https://taetaetae.github.io/images/a-good-developer-in-terms-of-self-development/exception.gif" title="/images/a-good-developer-in-terms-of-self-development/exception.gif" data-thumbnail="/images/a-good-developer-in-terms-of-self-development/exception.gif" data-sub-html="&lt;h2>개발을 하다보면 꼼꼼하게 체크해야할 예외가 너무 많다. 출처 : https://gfycat.com/ko/menacingeducatedatlasmoth&lt;/h2>">
 &lt;img
 class="lazyload"
 src="https://taetaetae.github.io/svg/loading.min.svg"
 data-src="https://taetaetae.github.io/images/a-good-developer-in-terms-of-self-development/exception.gif"
 data-srcset="https://taetaetae.github.io/images/a-good-developer-in-terms-of-self-development/exception.gif, https://taetaetae.github.io/images/a-good-developer-in-terms-of-self-development/exception.gif 1.5x, https://taetaetae.github.io/images/a-good-developer-in-terms-of-self-development/exception.gif 2x"
 data-sizes="auto"
 alt="/images/a-good-developer-in-terms-of-self-development/exception.gif" width="50%" />
 &lt;/a>&lt;figcaption class="image-caption">개발을 하다보면 꼼꼼하게 체크해야할 예외가 너무 많다. &lt;br>출처 : &lt;a href="https://gfycat.com/ko/menacingeducatedatlasmoth" target="_blank" rel="noopener noreffer ">https://gfycat.com/ko/menacingeducatedatlasmoth&lt;/a>&lt;/figcaption>
 &lt;/figure>
&lt;p>　복잡한 구조가 필요로 하는 개발을 해야 한다고 가정해보자. 연동하는 시스템도 많고 정말 다양한 요구 사항을 하나의 시스템에서 구현을 해야 할 경우 보통 개발을 하기에 앞서 &amp;lsquo;설계&amp;rsquo;라는 단계를 거치기 마련이다. 그때 글쓰기를 했을 때의 습관(스킬?)을 적용해 보면 요구 사항들 중에 중요한 feature 기준으로 정리를 하게 되고, 각 이해관계자들에게 정리한 부분을 공유하며 예외 상황을 보다 빠르게 확인할 수도 있다. 심지어 코드 레벨에서도 지난밤에 야식으로 먹은 라면 면발처럼 꼬여있는 부분들을 보다 개발하기 편하고 유지 보수가 용이하게 구조를 변경하는 &amp;lsquo;정리&amp;rsquo;의 습관 또한 글쓰기를 통해서 수련을 할 수 있다. 이러한 &amp;lsquo;꼼꼼함&amp;rsquo;을 기르는 데에는 글쓰기만 한 게 없다고 생각한다.&lt;/p>
&lt;p>　우리는 다양한 개발 언어로 코딩을 하곤 한다. 왜 &lt;a href="http://www.yes24.com/Product/Goods/6692314" target="_blank" rel="noopener noreffer ">읽기좋은 코드가 좋은 코드&lt;/a>라는 책이 있듯이 결국 코딩 또한 커뮤니케이션이 일종이라 생각한다. 내가 생각하는 로직을 개발 언어로 코딩을 해야 하는 상황이면, 결국 내가 생각하는 로직이 명료하고 정리가 잘 된 상태에서야 코드 또한 소위 &amp;lsquo;읽기 좋은 코드&amp;rsquo;가 되지 않을까 싶다.&lt;/p>
&lt;p>　블로그를 시작할 때 어디서부터 시작해야 하나 막막하다면, 오늘의 배운 내용 (개발자들 사이에서 유행처럼 번지고 있는 &lt;a href="https://github.com/milooy/TIL" target="_blank" rel="noopener noreffer ">TIL&lt;/a>에 대해서 정리해 보는 것부터 추천한다. 경력이 1년 차여도 10년 차여도 개발을 하다 보면 새로운 것을 발견하기 마련이다. 그렇게 조금씩 적절한 블로그 플랫폼에 정리를 해 나가다 보면 어느새 자신만의 개발 히스토리가 만들어지고, 나아가 글쓰기가 전해주는 긍정적인 효과를 만끽하리라 자부한다.&lt;/p></description></item></channel></rss>