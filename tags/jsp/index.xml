<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Jsp on</title><link>https://taetaetae.github.io/tags/jsp/</link><description>Recent content in Jsp on</description><generator>Hugo</generator><language>en</language><lastBuildDate>Wed, 04 Jan 2017 18:36:17 +0000</lastBuildDate><atom:link href="https://taetaetae.github.io/tags/jsp/index.xml" rel="self" type="application/rss+xml"/><item><title>jsp include</title><link>https://taetaetae.github.io/2017/01/04/20170104/</link><pubDate>Wed, 04 Jan 2017 18:36:17 +0000</pubDate><guid>https://taetaetae.github.io/2017/01/04/20170104/</guid><description>&lt;h2 id="1-디렉티브방식">1. 디렉티브방식&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-jsp" data-lang="jsp">&amp;lt;%@ include file=&amp;#34;~~&amp;#34;%&amp;gt;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>정적 include 방식, 인클루드 되는 내용이 단순하게 텍스트로 포함되어 컴파일이 된다. (복사된다는 느낌)&lt;/li>
&lt;/ul>
&lt;!-- more -->
&lt;ul>
&lt;li>주의할점은 비록 포함되는 페이지라 하더라도 한글을 제대로 처리하기 위해서는 포함되어지는 jsp파일 상단에 인코딩 명시를 해줘야 한다.&lt;/li>
&lt;li>포함되어지는 jsp 내용이 변경이 될 경우 해당 jsp를 사용하는 jsp를 강제로 변경(touch) 해줘서 다시 컴파일이 되게 해야하는 불편함이 있다.&lt;/li>
&lt;li>정적 방식이기 때문에 예로들어 전역변수를 인클루드 되는 jsp에서 지정하게 되면 상위jsp에서 사용이 가능하게 된다.&lt;/li>
&lt;/ul>
&lt;h2 id="2-액션태그-방식">2. 액션태그 방식&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-jsp" data-lang="jsp">&amp;lt;jsp:include page=&amp;#34;~~&amp;#34;/&amp;gt;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>동적 include 방식, 포함하는 문서와 상관없이 동적으로 컴파일 된다. (완전히 별도로 동작하기 때문에 변수를 동시에 사용하려면 따로 파라미터로 넘겨줘야 한다.)&lt;/li>
&lt;li>&lt;code>flush&lt;/code> 옵션은 요청흐름이 넘어가면서 현재까지 페이지의 결과를 출력할 것인지 말것인지를 결정하는것이다. 일반적으로 &lt;code>false&lt;/code>로 설정한다.&lt;/li>
&lt;li>&lt;code>&amp;lt;jsp:param&amp;gt;&lt;/code>를 이용하여 파라미터를 전송할수 있다.&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code class="language-jsp" data-lang="jsp">&amp;lt;jsp:include page=&amp;#34;...&amp;#34; flush=&amp;#34;false&amp;#34;&amp;gt;
 &amp;lt;jsp:param name=&amp;#34;name&amp;#34; value=&amp;#34;이름&amp;#34; /&amp;gt;
 &amp;lt;jsp:param name=&amp;#34;pageName&amp;#34; value=&amp;#34;페이지이름&amp;#34;/&amp;gt;
&amp;lt;/jsp:include&amp;gt;
&lt;/code>&lt;/pre>&lt;h2 id="3-jstl-방식">3. JSTL 방식&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-jsp" data-lang="jsp">&amp;lt;c:import url=&amp;#34;~~&amp;#34; /&amp;gt;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>JSTL(JSP Standard Tag Library) 태그중의 하나&lt;/li>
&lt;li>컴파일 되고 동작하는 방식은 액션태그&lt;code>&amp;lt;jsp:include page=&amp;quot;~~&amp;quot;/&amp;gt;&lt;/code>와 같음&lt;/li>
&lt;li>현재 컨테이너 안에 있는 자원외에 다른 외부 자원도 포함이 가능하다.&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code class="language-jsp" data-lang="jsp">&amp;lt;c:import url=&amp;#34;http://www.google.com/&amp;#34;/&amp;gt;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>아래와 같이 보다 더 다양한 옵션이 제공된다&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>&amp;lt;c:import! url=&amp;#34;읽어올 URL&amp;#34;
 var=&amp;#34;읽어올 데이터를 저장할 변수명&amp;#34;
 scope=&amp;#34;변수의 공유 범위&amp;#34;
 varReader=&amp;#34;리소스의 내용을 Reader 객체로 읽어올 때 사용&amp;#34;
 charEncoding=&amp;#34;읽어온 데이터의 캐릭터셋 지정&amp;#34; /&amp;gt;
&lt;/code>&lt;/pre></description></item></channel></rss>