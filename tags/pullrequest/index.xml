<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PullRequest on</title><link>https://taetaetae.github.io/tags/pullrequest/</link><description>Recent content in PullRequest on</description><generator>Hugo</generator><language>en</language><lastBuildDate>Mon, 07 Sep 2020 10:09:56 +0000</lastBuildDate><atom:link href="https://taetaetae.github.io/tags/pullrequest/index.xml" rel="self" type="application/rss+xml"/><item><title>빌드/테스트는 내가 해줄게. 너는 코딩에 집중해 (by GitHub Pull Request Builder)</title><link>https://taetaetae.github.io/2020/09/07/github-pullrequest-build/</link><pubDate>Mon, 07 Sep 2020 10:09:56 +0000</pubDate><guid>https://taetaetae.github.io/2020/09/07/github-pullrequest-build/</guid><description>&lt;p>　git 은 분산 버전 관리 시스템 중 가장 잘 알려져 있다고 해도 과언이 아닐 정도로 대부분의 시스템에서 사용되고 있는 것 같다. 이를 웹서비스에서 보다 편하게 사용할 수 있도록 한 시스템이 Github. &lt;!--more -->Github 을 사용하는 이유 중에 가장 큰 이유를 하나만 이야기해보자면 바로 온라인상에서 코드 리뷰를 할 수 있는 pullRequest라는 기능 때문이 아닐까 조심스럽게 생각을 해본다.&lt;/p>
&lt;p>　pullRequest는 work branch에서 작업한 내용을 base branch로 merge 전 꼭 코드 리뷰가 아니더라도 작업한 내용에 대해서 다양한 검사를 자동화할 수 있는 강력한 기능들이 많다. 이러한 자동화는 CI(지속적 통합) 관점에서 매우 중요한데 코드에 대해 체크해야 할 부분들(빌드, 테스트, 정적 분석 등)을 &amp;ldquo;알아서&amp;rdquo; 해준다면 작업자는 오롯이 비즈니스 로직 개발에 대해서만 신경 쓸 수 있으니 생산성 절약 측면에서 엄청난 효과를 볼 수 있다.&lt;/p>
&lt;figure>&lt;a class="lightgallery" href="https://taetaetae.github.io/images/github-pullrequest-build/car.gif" title="/images/github-pullrequest-build/car.gif" data-thumbnail="/images/github-pullrequest-build/car.gif" data-sub-html="&lt;h2>내가 하는일에만 집중할 수 있게! 출처 : https://www.clien.net/service/board/park/10453442&lt;/h2>">
 &lt;img
 class="lazyload"
 src="https://taetaetae.github.io/svg/loading.min.svg"
 data-src="https://taetaetae.github.io/images/github-pullrequest-build/car.gif"
 data-srcset="https://taetaetae.github.io/images/github-pullrequest-build/car.gif, https://taetaetae.github.io/images/github-pullrequest-build/car.gif 1.5x, https://taetaetae.github.io/images/github-pullrequest-build/car.gif 2x"
 data-sizes="auto"
 alt="/images/github-pullrequest-build/car.gif" width="50%" />
 &lt;/a>&lt;figcaption class="image-caption">내가 하는일에만 집중할 수 있게! &lt;br> 출처 : &lt;a href="https://www.clien.net/service/board/park/10453442" target="_blank" rel="noopener noreffer ">https://www.clien.net/service/board/park/10453442&lt;/a>&lt;/figcaption>
 &lt;/figure>
&lt;p>이번 포스팅에서는 그중에서도 아주 간단한 설정만으로 work branch의 빌드 상태를 검사해 볼 수 있는 Jenkins의 Github Pull Request Builder를 설치 및 활용해 보고자 한다.&lt;/p>
&lt;blockquote>
&lt;p>사실 최근 팀에서 CI 서버를 이전해야 했었다. 머릿속에서는 어떻게 하면 되겠지 싶었지만 막상 해보려니 Jenkins 버전업도 되었고 뭐부터 해야 할지 허둥대는 필자가 부끄러웠다. 이참에 정리를 해보며 다시 한번 리마인드 하는 시간을 가져보고자 한다. (이래서 기억보다 기록이 중요하다.)&lt;/p>&lt;/blockquote>
&lt;h2 id="준비물">준비물&lt;/h2>
&lt;p>　전체적인 흐름은 아래 그림처럼 흘러가기 때문에 당연히 서버에 Jenkins 가 설치되어 있어야 한다. Jenkins 설치는 필자의 포스팅(&lt;a href="https://taetaetae.github.io/2018/12/02/jenkins-install/" target="_blank" rel="noopener noreffer ">Jenkins 설치 치트키&lt;/a>)를 참고해 보는 것도 좋을 것 같다.&lt;/p>
&lt;figure>&lt;a class="lightgallery" href="https://taetaetae.github.io/images/github-pullrequest-build/programmer-github-jenkins.jpg" title="/images/github-pullrequest-build/programmer-github-jenkins.jpg" data-thumbnail="/images/github-pullrequest-build/programmer-github-jenkins.jpg" data-sub-html="&lt;h2>전체적인 흐름&lt;/h2>">
 &lt;img
 class="lazyload"
 src="https://taetaetae.github.io/svg/loading.min.svg"
 data-src="https://taetaetae.github.io/images/github-pullrequest-build/programmer-github-jenkins.jpg"
 data-srcset="https://taetaetae.github.io/images/github-pullrequest-build/programmer-github-jenkins.jpg, https://taetaetae.github.io/images/github-pullrequest-build/programmer-github-jenkins.jpg 1.5x, https://taetaetae.github.io/images/github-pullrequest-build/programmer-github-jenkins.jpg 2x"
 data-sizes="auto"
 alt="/images/github-pullrequest-build/programmer-github-jenkins.jpg" width="50%" />
 &lt;/a>&lt;figcaption class="image-caption">전체적인 흐름&lt;/figcaption>
 &lt;/figure>
&lt;p>　참고로 필자는 GitHub Enterprise 버전에서 사용했는데 일반 Github에서도 동일한 방법으로 사용 가능하다.&lt;/p>
&lt;h3 id="github과-jenkins의-연동을-위한-2가지-설정">Github과 Jenkins의 연동을 위한 2가지 설정&lt;/h3>
&lt;p>　Github 과 Jenkins 가 통신이 되도록 설정해 줘야 한다. 그래야 Github의 코드를 받아서 Jenkins 가 빌드를 하고 그 빌드 결과를 다시 Github에 리포트가 가능해지기 때문이다. 먼저 첫 번째로 ssh 설정으로 Github의 코드를 가져오도록 ssh 설정을 해두자. ssh 설정하는 방법은 필자의 포스팅(&lt;a href="https://taetaetae.github.io/2018/02/08/github-with-jenkins/" target="_blank" rel="noopener noreffer ">Github과 Jenkins 연동하기&lt;/a>)편을 확인해보면 될 것 같다.&lt;/p>
&lt;p>　그다음으로 아래에서 이야기할 &lt;code>GitHub Pull Request Builder&lt;/code>라는 Jenkins plugin 이 빌드가 끝난 뒤에 결과를 리포팅 해줄 수 있는 인증 토큰을 발급받아두자. Github &amp;gt; Settings &amp;gt; Developer settings &amp;gt; Personal access tokens 화면에서 키를 생성하고 만들어진 키를 저장해 둔다. (이 키는 보안에 유의해야 하고, 화면 경고(?)에서도 볼 수 있듯이 키는 생성 시 한 번밖에 볼 수 없기 때문에 미리 저장해 둬야 한다.)&lt;/p>
&lt;figure>&lt;a class="lightgallery" href="https://taetaetae.github.io/images/github-pullrequest-build/github-access-token.jpg" title="/images/github-pullrequest-build/github-access-token.jpg" data-thumbnail="/images/github-pullrequest-build/github-access-token.jpg" data-sub-html="&lt;h2>인증토큰을 미리 받아두자.&lt;/h2>">
 &lt;img
 class="lazyload"
 src="https://taetaetae.github.io/svg/loading.min.svg"
 data-src="https://taetaetae.github.io/images/github-pullrequest-build/github-access-token.jpg"
 data-srcset="https://taetaetae.github.io/images/github-pullrequest-build/github-access-token.jpg, https://taetaetae.github.io/images/github-pullrequest-build/github-access-token.jpg 1.5x, https://taetaetae.github.io/images/github-pullrequest-build/github-access-token.jpg 2x"
 data-sizes="auto"
 alt="/images/github-pullrequest-build/github-access-token.jpg" width="50%" />
 &lt;/a>&lt;figcaption class="image-caption">인증토큰을 미리 받아두자.&lt;/figcaption>
 &lt;/figure>
&lt;h2 id="jenkins-설정">Jenkins 설정&lt;/h2>
&lt;p>　Jenkins &amp;gt; 관리 &amp;gt; pluginManager에 들어가 &lt;code>GitHub Pull Request Builder&lt;/code>를 검색 후 설치해 준다. 그러고 나서 Jenkins &amp;gt; 관리 &amp;gt; 환경설정에 들어가 보면 아래와 같이 &lt;code>GitHub Pull Request Builder&lt;/code> 항목이 생긴 것을 확인할 수 있고 위에서 설정한 인증토큰을 아래처럼 등록 후 저장을 한다.&lt;/p>
&lt;figure>&lt;a class="lightgallery" href="https://taetaetae.github.io/images/github-pullrequest-build/add-github-access-token.jpg" title="/images/github-pullrequest-build/add-github-access-token.jpg" data-thumbnail="/images/github-pullrequest-build/add-github-access-token.jpg" data-sub-html="&lt;h2>credentials 을 위에서 발급받은 인증토큰으로 등록해준다.&lt;/h2>">
 &lt;img
 class="lazyload"
 src="https://taetaetae.github.io/svg/loading.min.svg"
 data-src="https://taetaetae.github.io/images/github-pullrequest-build/add-github-access-token.jpg"
 data-srcset="https://taetaetae.github.io/images/github-pullrequest-build/add-github-access-token.jpg, https://taetaetae.github.io/images/github-pullrequest-build/add-github-access-token.jpg 1.5x, https://taetaetae.github.io/images/github-pullrequest-build/add-github-access-token.jpg 2x"
 data-sizes="auto"
 alt="/images/github-pullrequest-build/add-github-access-token.jpg" width="50%" />
 &lt;/a>&lt;figcaption class="image-caption">credentials 을 위에서 발급받은 인증토큰으로 등록해준다.&lt;/figcaption>
 &lt;/figure>
&lt;p>　Jenkins job을 하나 만들고 pullRequest 가 발생했을 때 자동으로 실행될 수 있도록 설정을 해준다. 먼저 General 탭에 &lt;code>Github project&lt;/code>에 Github url 을 적어주고&lt;/p>
&lt;a class="lightgallery" href="https://taetaetae.github.io/images/github-pullrequest-build/jenkins-general.jpg" title="/images/github-pullrequest-build/jenkins-general.jpg" data-thumbnail="/images/github-pullrequest-build/jenkins-general.jpg">
 &lt;img
 class="lazyload"
 src="https://taetaetae.github.io/svg/loading.min.svg"
 data-src="https://taetaetae.github.io/images/github-pullrequest-build/jenkins-general.jpg"
 data-srcset="https://taetaetae.github.io/images/github-pullrequest-build/jenkins-general.jpg, https://taetaetae.github.io/images/github-pullrequest-build/jenkins-general.jpg 1.5x, https://taetaetae.github.io/images/github-pullrequest-build/jenkins-general.jpg 2x"
 data-sizes="auto"
 alt="/images/github-pullrequest-build/jenkins-general.jpg" width="50%" />
 &lt;/a>
&lt;p>　소스 코드 관리 탭에서 ssh 주소를 적고 위에서 미리 설정한 ssh 키로 credentials 값을 넣어준다. 전에도 이야기했지만 이 부분에서 오류가 발생하면 빨간색 글씨로 오류 내용이 나오고 아래 화면처럼 오류가 없다면 아무것도 안 나온다. Refspec 에 &lt;code>+refs/pull/*:refs/remotes/origin/pr/*&lt;/code> 라고 적어주고 브랜치 설정은 파라미터로 받아와서 pullRequest를 발생시킨 브랜치를 빌드 할 수 있도록 &lt;code>${sha1}&lt;/code> 라고 적어주자.&lt;/p></description></item></channel></rss>