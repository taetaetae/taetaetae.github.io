<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Github-Actions on</title><link>https://taetaetae.github.io/tags/github-actions/</link><description>Recent content in Github-Actions on</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sun, 29 Nov 2020 18:12:15 +0900</lastBuildDate><atom:link href="https://taetaetae.github.io/tags/github-actions/index.xml" rel="self" type="application/rss+xml"/><item><title>기술블로그 개편기 (by HUGO)</title><link>https://taetaetae.github.io/posts/blog-reorganization-by-hugo/</link><pubDate>Sun, 29 Nov 2020 18:12:15 +0900</pubDate><guid>https://taetaetae.github.io/posts/blog-reorganization-by-hugo/</guid><description>&lt;p>　웹서비스 개발자라면 나만의 블로그쯤은 있어야지 하며 기술 블로그를 시작한 지도 어느덧 4년이 되었다. 처음엔 그저 새로 알게 된 기술이나 삽질하며 경험한 것들 중에 핵심만을 적어놓는 수준이었다. (지금 다시 보면 뭔가 오글거리는 건 기분 탓이겠지&amp;hellip;) 그렇게 계속 글을 써오면서 글쓰기라는 것에 관심을 갖게 되고 내 글이 누군가에게 도움이 될 거라는 기대에 조금이라도 글을 잘 써보고자 단순 기록 용이 아닌 하나의 &amp;lsquo;글&amp;rsquo;을 쓰려고 노력해 온 것 같다.&lt;/p>
&lt;p>　일주일에 한 개는 써야지. 한 달에 한 개는 써야지. 하며 자꾸 나 자신과의 타협을 하다가 최근에는 회사에서 운영하는 서비스 개편 때문에 정신없이 바쁘다는 핑계로 &amp;lsquo;블로그&amp;rsquo;에 &amp;lsquo;ㅂ&amp;rsquo;자도 생각하지 못하게 된다. 무엇이 문제일까?라는 생각은 결국 내 기술 블로그도 회사 서비스처럼 &amp;lsquo;개편&amp;rsquo;을 해보자는 생각으로 도달하게 되었고 간단할 것만 같았던 기술 블로그 개편 작업은 꽤 오랫동안 + 다양한 삽질들로 작업을 하게 된다.&lt;/p>
&lt;p>　이번 포스팅에서는 기술 블로그를 개편하며 겪었던 내용들에 대해 정리해보고자 한다. 기존에 기술 블로그를 운영하시는 분들이나 이번에 새롭게 시작하시는 분들께 도움이 될 거라 기대한다. 더불어 서비스 &amp;lsquo;출시&amp;rsquo; 가 아닌 개편&amp;rsquo;이라는 과정 속에서 느끼게 되었던 인사이트도 간략하게 작성해볼까 한다.&lt;/p>
&lt;h2 id="기술블로그-플랫폼-선택">기술블로그 플랫폼 선택&lt;/h2>
&lt;p>　처음 블로그를 쓰기 시작했을 때 포털서비스의 글쓰기 플랫폼을 사용하지 않은 이유는 단 하나다. &amp;lsquo;글쓰기&amp;rsquo; 뿐만 아니라 개발자이기에 웹사이트(블로그)를 내 입맛에 맞게 커스터마이징 하기 위해서. 그 이유로 &lt;a href="https://hexo.io/" target="_blank" rel="noopener noreffer ">hexo&lt;/a> 라는 프레임워크에 github의 호스팅을 사용하여 운영을 해왔다. 그렇게 블로그를 운영해오면서 느꼈던 불편했던 부분들과 개편을 하며 기대하는 부분들을 정리하면 아래와 같다.&lt;/p>
&lt;ul>
&lt;li>테마(UI)가 이뻐야 하고 기능들이 많으면 좋겠다.&lt;/li>
&lt;li>기술 블로그인 만큼 코드가 많이 삽입되니 코드 표현 또한 이뻐야 한다.&lt;/li>
&lt;li>테마 또는 프레임워크의 커뮤니티가 활발해야 한다.&lt;/li>
&lt;li>페이지 생성 또는 만들어진 웹페이지의 성능이 좋아야 한다.&lt;/li>
&lt;li>글을 작성하고 배포하는 과정이 심플하고 깔끔해야 한다.
﻿&lt;/li>
&lt;/ul>
&lt;p>　위와 같은 이유를 기반으로 검색을 해보다 SSG(쓱 쇼핑몰 아님, Static site generators)를 깔끔하게 정리해 놓은 &lt;a href="https://jamstack.org/generators/" target="_blank" rel="noopener noreffer ">사이트&lt;/a>를 발견한다. 정말 다양한 플랫폼들을 살펴보며 필자에게 맞는 게 어떤 건지 고민하다 결국 &lt;a href="https://gohugo.io/" target="_blank" rel="noopener noreffer ">hugo&lt;/a> 를 선택하게 된다. hugo를 선택한 이유는 go라는 언어를 사용한다는 것과 (간접적으로라도 다른 언어를 경험해보고 싶어서 + go 언어가 빠르다는 소리를 어디선가 들어서) &lt;a href="https://themes.gohugo.io/" target="_blank" rel="noopener noreffer ">테마들&lt;/a>이 너무 다양했기 때문이다.&lt;/p>
&lt;figure>&lt;a class="lightgallery" href="https://taetaetae.github.io/images/blog-reorganization-by-hugo/hugo_homepage.jpg" title="/images/blog-reorganization-by-hugo/hugo_homepage.jpg" data-thumbnail="/images/blog-reorganization-by-hugo/hugo_homepage.jpg" data-sub-html="&lt;h2>﻿아주 대놓고 빠르다고 하니&amp;hellip; 쓰고 싶어진다.&lt;/h2>">
 &lt;img
 class="lazyload"
 src="https://taetaetae.github.io/svg/loading.min.svg"
 data-src="https://taetaetae.github.io/images/blog-reorganization-by-hugo/hugo_homepage.jpg"
 data-srcset="https://taetaetae.github.io/images/blog-reorganization-by-hugo/hugo_homepage.jpg, https://taetaetae.github.io/images/blog-reorganization-by-hugo/hugo_homepage.jpg 1.5x, https://taetaetae.github.io/images/blog-reorganization-by-hugo/hugo_homepage.jpg 2x"
 data-sizes="auto"
 alt="/images/blog-reorganization-by-hugo/hugo_homepage.jpg" width="80%" />
 &lt;/a>&lt;figcaption class="image-caption">﻿아주 대놓고 빠르다고 하니&amp;hellip; 쓰고 싶어진다.&lt;/figcaption>
 &lt;/figure>
&lt;p>　결국 hugo에 &lt;a href="https://hugo-ranking-trend.com/" target="_blank" rel="noopener noreffer ">hugo-ranking-trend&lt;/a>라는 사이트에서 상위에 랭크가 되어있고 기술 블로그 성격에 적합할 것 같은 &lt;a href="https://github.com/dillonzq/LoveIt" target="_blank" rel="noopener noreffer ">LoveIt&lt;/a>이라는 테마를 사용하기로 결정하였다. 자 그럼 시작해볼까?!&lt;/p>
&lt;h2 id="hugo-는-어떻게-쓰는거야">hugo 는 어떻게 쓰는거야?&lt;/h2>
&lt;p>﻿　대부분의 오픈소스는 hello world 혹은 quick start 같이 처음 접하는 사람들을 위한 도큐먼트가 있기 마련. hugo도 마찬가지로 &lt;a href="https://gohugo.io/getting-started/quick-start/" target="_blank" rel="noopener noreffer ">quick-start&lt;/a>가 있었고 이를 천천히 따라 하면 생각보다 쉽게 초기 세팅을 할 수 있었&amp;hellip; 을꺼라 기대했지만 약간 초기 설정 과정이 어려워서 남겨 두고자 한다.&lt;/p>
&lt;blockquote>
&lt;p>참고로 필자는 윈도 10 환경에서 구성하였다. mac이라면 더 쉽게 설정할 수 있는 것 같은데 이 부분은 OS의 차이에서 생겨나는 어쩔 수 없는 약간의 장벽이라 생각한다. 이쁜 테마와 새로운 환경을 사용할 수 있다는 기대감으로 꾹 참아본다.&lt;/p>&lt;/blockquote>
&lt;h3 id="기본설정">기본설정&lt;/h3>
&lt;p>　﻿git이 설치되어 있다는 가정하에 우선 hugo는 go 언어기반으로 돌아가기에 우선 go를 설치해야 한다. &lt;a href="https://golang.org/dl/" target="_blank" rel="noopener noreffer ">다운로드&lt;/a>페이지에서 환경에 맞는 설치 파일을 다운로드하고 설치를 해준다. 다음으로 패키지 관리자인 chocolatey 또한 설치가 필요하다. &lt;a href="https://chocolatey.org/install" target="_blank" rel="noopener noreffer ">공식 홈페이지&lt;/a>페이지에서 나와있는 순서대로 진행하면 설치 완료. 필자는 여기서 진행이 잘 안됐었는데, &amp;lsquo;관리자 권한&amp;rsquo;으로 PowerShell 을 실행시켜야지만 성공을 할 수 있었다.﻿&lt;/p>
&lt;p>﻿　위 설정이 완료되었으면 드디어 hugo를 설치해 주고 초기화를 해준 뒤 샘플로 글 하나를 만들고 서버를 띄우면 끝.&lt;/p></description></item></channel></rss>